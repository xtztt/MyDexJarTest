apply plugin: 'com.android.library'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
//生成jar文件，需要在android{}节点下
task makeJar(type: Copy) {
    //删除存在的，有的话删了，没有也假装删一下~
    delete 'build/libs/myjar.jar'
    //从指定文件生成一个jar
    //老版本死丢丢要注意，可能路径是这样的：from('build/intermediates/bundles/debug/')
    //或者这样 ：from('build/intermediates/classes/com/')
    from('build/intermediates/aar_main_jar/release/')
    //打jar包，jar包所在目录
    into('build/libs/')
    //筛选，只要这个jar
    include('classes.jar')
    //去掉不需要的内容
//    exclude('test/','BuildConfig','R.class')
    //去掉R文件
//    exclude{it.name.startsWith('R$');}
    //重命名
    rename ('classes.jar', 'myjar.jar')
}
//不build一下肯定是不会生成class文件的，所以要加这行
makeJar.dependsOn(build)

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}